require 'aws-sdk-s3'

# Description: Sublayer::Action responsible for uploading and downloading files to/from Amazon S3 buckets.
# This action facilitates seamless integration with AWS S3, allowing easy file storage and retrieval.
#
# It is initialized with an S3 bucket name and allows to either upload a file to the bucket or download a file from it.
#
# Example usage: When you want to store files generated by AI processes in cloud storage or retrieve files for processing.

class AmazonS3FileAction < Sublayer::Actions::Base
  def initialize(bucket_name:, region: 'us-east-1')
    @bucket_name = bucket_name
    @s3_client = Aws::S3::Client.new(region: region, access_key_id: ENV['AWS_ACCESS_KEY_ID'], secret_access_key: ENV['AWS_SECRET_ACCESS_KEY'])
  end

  def upload(file_path:, key: nil)
    key ||= File.basename(file_path)
    begin
      @s3_client.put_object(bucket: @bucket_name, key: key, body: File.read(file_path))
      Sublayer.configuration.logger.log(:info, "Successfully uploaded \\#{file_path} to bucket \\#{@bucket_name} with key \\#{key}")
      key
    rescue Aws::S3::Errors::ServiceError => e
      error_message = "Error uploading file to S3: \\#{e.message}"
      Sublayer.configuration.logger.log(:error, error_message)
      raise StandardError, error_message
    end
  end

  def download(key:, download_path: nil)
    download_path ||= key
    begin
      response = @s3_client.get_object(bucket: @bucket_name, key: key)
      File.open(download_path, 'wb') { |file| file.write(response.body.read) }
      Sublayer.configuration.logger.log(:info, "Successfully downloaded \\#{key} from bucket \\#{@bucket_name} to \\#{download_path}")
      download_path
    rescue Aws::S3::Errors::NoSuchKey => e
      error_message = "File not found in S3: \\#{e.message}"
      Sublayer.configuration.logger.log(:error, error_message)
      raise StandardError, error_message
    rescue Aws::S3::Errors::ServiceError => e
      error_message = "Error downloading file from S3: \\#{e.message}"
      Sublayer.configuration.logger.log(:error, error_message)
      raise StandardError, error_message
    end
  end
end
