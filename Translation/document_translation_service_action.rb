require 'net/http'
require 'uri'
require 'json'

# Description: Sublayer::Action responsible for translating documents to a specified language using a translation API.
# This action is intended for integrating multilingual support into workflows, using a reliable translation API.
#
# It is initialized with a text, target_language, and an optional source_language.
# It uses a translation API to translate the given text into the target language.
# It returns the translated text.
#
# Example usage: Translate documents generated by AI processes into multiple languages for global accessibility.

class DocumentTranslationServiceAction < Sublayer::Actions::Base
  def initialize(text:, target_language:, source_language: nil)
    @text = text
    @target_language = target_language
    @source_language = source_language
    @api_key = ENV['TRANSLATION_API_KEY']
    @api_url = ENV['TRANSLATION_API_URL']
  end

  def call
    translate_text
  end

  private

  def translate_text
    uri = URI.parse(@api_url)
    http = Net::HTTP.new(uri.host, uri.port)
    http.use_ssl = true

    request = Net::HTTP::Post.new(uri.request_uri)
    request['Content-Type'] = 'application/json'
    request['Authorization'] = "Bearer #{@api_key}"
    request.body = {
      text: @text,
      target_language: @target_language,
      source_language: @source_language
    }.to_json

    begin
      response = http.request(request)
      case response.code.to_i
      when 200..299
        result = JSON.parse(response.body)
        result['translated_text']
      else
        error_message = "Failed to translate text. HTTP Response Code: #{response.code}"
        Sublayer.configuration.logger.log(:error, error_message)
        raise StandardError, error_message
      end
    rescue StandardError => e
      Sublayer.configuration.logger.log(:error, "Error translating text: #{e.message}")
      raise e
    end
  end
end
