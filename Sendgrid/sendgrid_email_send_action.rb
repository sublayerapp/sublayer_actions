require 'sendgrid-ruby'

# Description: Sublayer::Action responsible for sending emails using the Sendgrid API.
# This action enables Sublayer workflows to send automated emails, notifications,
# or AI-generated reports to users or stakeholders.
#
# Requires: 'sendgrid-ruby' gem
# $ gem install sendgrid-ruby
# Or add `gem 'sendgrid-ruby'` to your Gemfile
#
# It is initialized with the recipient's email, subject, and content of the email.
# Optionally, you can specify a sender email (from_email) and content type.
# It returns the status code of the API response to confirm the email was sent successfully.
#
# Example usage: When you want to send an email notification or report generated by an AI process.

class SendgridEmailSendAction < Sublayer::Actions::Base
  include SendGrid

  def initialize(to_email:, subject:, content:, from_email: nil, content_type: 'text/plain')
    @to_email = to_email
    @subject = subject
    @content = content
    @from_email = from_email || ENV['SENDGRID_FROM_EMAIL']
    @content_type = content_type
    @api_key = ENV['SENDGRID_API_KEY']
  end

  def call
    begin
      response = send_email
      Sublayer.configuration.logger.log(:info, "Email sent successfully to #{@to_email}")
      response.status_code
    rescue StandardError => e
      error_message = "Error sending email via Sendgrid: #{e.message}"
      Sublayer.configuration.logger.log(:error, error_message)
      raise StandardError, error_message
    end
  end

  private

  def send_email
    from = Email.new(email: @from_email)
    to = Email.new(email: @to_email)
    content = Content.new(type: @content_type, value: @content)
    mail = Mail.new(from, @subject, to, content)

    sg = SendGrid::API.new(api_key: @api_key)
    sg.client.mail._('send').post(request_body: mail.to_json)
  end
end
