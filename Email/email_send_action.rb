require 'net/smtp'

# Description: Sublayer::Action responsible for sending an email via SMTP.
# Useful for notifying stakeholders about outcomes generated by AI processes.
#
# Requires: SMTP server details and credentials.
#
# It is initialized with smtp_settings (host, port, domain, user_name, password),
# from_address, to_address, subject, and message body.
# Returns a confirmation if the email was sent successfully.
#
# Example usage: When you want to send a notification or a report generated by AI to stakeholders via email.

class EmailSendAction < Sublayer::Actions::Base
  def initialize(smtp_settings:, from_address:, to_address:, subject:, message_body:)
    @smtp_settings = smtp_settings
    @from_address = from_address
    @to_address = to_address
    @subject = subject
    @message_body = message_body
  end

  def call
    message = <<~MESSAGE_END
      From: #{@from_address}
      To: #{@to_address}
      Subject: #{@subject}

      #{@message_body}
    MESSAGE_END

    begin
      Net::SMTP.start(
        @smtp_settings[:address],
        @smtp_settings[:port],
        @smtp_settings[:domain],
        @smtp_settings[:user_name],
        @smtp_settings[:password],
        :login
      ) do |smtp|
        smtp.send_message message, @from_address, @to_address
      end
      Sublayer.configuration.logger.log(:info, "Email sent successfully to #{@to_address}")
      true
    rescue Net::SMTPFatalError => e
      error_message = "SMTP failed to send email: #{e.message}"
      Sublayer.configuration.logger.log(:error, error_message)
      raise StandardError, error_message
    rescue StandardError => e
      error_message = "General error when sending email: #{e.message}"
      Sublayer.configuration.logger.log(:error, error_message)
      raise StandardError, error_message
    end
  end
end
