# Description: Sublayer::Action responsible for sending a file attachment to a specific Slack channel or user.
# It extends the functionality of SlackMessageSendAction by allowing the sending of files,
# which can be useful for sharing reports, logs, or other documents generated by AI processes.
# 
# Requires: `slack-ruby-client` gem
# $ gem install slack-ruby-client
# Or
# add `gem "slack-ruby-client"` to your gemfile 
# and add `requires "slack-ruby-client"` somewhere in your app.
#
# It is initialized with a channel (can be a channel name or user ID), a file path, and an optional message.
# It returns the timestamp of the sent message to confirm it was sent successfully.
#
# Example usage: When you want to send a file generated by an AI process to a Slack channel or user.

class SlackAttachmentSendAction < Sublayer::Actions::Base
  def initialize(channel:, file_path:, message: nil)
    @channel = channel
    @file_path = file_path
    @message = message
    @client = Slack::Web::Client.new(token: ENV['SLACK_API_TOKEN'])
  end

  def call
    begin
      response = @client.files_upload(
        channels: @channel,
        file: Faraday::UploadIO.new(@file_path, 'auto'),
        initial_comment: @message
      )
      Sublayer.configuration.logger.log(:info, "File attachment sent successfully to #{@channel}")
      response.ts
    rescue Slack::Web::Api::Errors::SlackError => e
      Sublayer.configuration.logger.log(:error, "Error sending Slack file attachment: #{e.message}")
      raise e
    rescue Errno::ENOENT => e
      Sublayer.configuration.logger.log(:error, "File not found: #{e.message}")
      raise e
    end
  end
end