require 'net/http'
require 'uri'
require 'json'

# Description: Sublayer::Action responsible for translating text into specified languages using an external translation API.
# This action enables multi-language support by translating AI-generated text into various languages.
#
# It is initialized with a text to translate, the target language(s), and optionally the source language.
# It returns the translated text.
#
# Example usage: When you want to translate text generated by an AI process to make it accessible in different languages.

class LanguageTranslatorAction < Sublayer::Actions::Base
  def initialize(text:, target_languages:, source_language: nil)
    @text = text
    @target_languages = target_languages
    @source_language = source_language
    @api_url = 'https://api.example.com/translate' # Replace with actual API URL
    @api_key = ENV['TRANSLATION_API_KEY'] # Assume API Key is stored in environment variables
  end

  def call
    begin
      translations = @target_languages.map do |language|
        translate_text(language)
      end

      Sublayer.configuration.logger.log(:info, "Successfully translated text into languages: #{@target_languages.join(', ')}")
      translations
    rescue StandardError => e
      error_message = "Error translating text: #{e.message}"
      Sublayer.configuration.logger.log(:error, error_message)
      raise StandardError, error_message
    end
  end

  private

  def translate_text(target_language)
    uri = URI.parse(@api_url)
    http = Net::HTTP.new(uri.host, uri.port)
    http.use_ssl = true

    request = Net::HTTP::Post.new(uri.request_uri)
    request.content_type = 'application/json'
    request['Authorization'] = "Bearer #{@api_key}"
    request.body = {
      text: @text,
      target_language: target_language,
      source_language: @source_language
    }.to_json

    response = http.request(request)

    case response.code.to_i
    when 200..299
      JSON.parse(response.body)['translated_text']
    else
      error_message = "Failed to translate text. HTTP Response Code: #{response.code}"
      Sublayer.configuration.logger.log(:error, error_message)
      raise StandardError, error_message
    end
  end
end
