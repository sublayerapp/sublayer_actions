require 'google/apis/calendar_v3'
require 'googleauth'

# Description: Sublayer::Action responsible for creating events in Google Calendar.
# This action allows easy integration of event scheduling within Sublayer workflows,
# enabling automated calendar management based on provided details like time, date, and attendees.
#
# It is initialized with calendar_id, event details such as start_time, end_time, summary, description,
# and an optional list of attendees.
#
# Example usage: When you want to automatically create calendar events from a list of scheduled tasks
# generated by an AI process.

class GoogleCalendarEventCreateAction < Sublayer::Actions::Base
  def initialize(calendar_id:, start_time:, end_time:, summary:, description: nil, attendees: [])
    @calendar_id = calendar_id
    @start_time = start_time
    @end_time = end_time
    @summary = summary
    @description = description
    @attendees = attendees
    @service = Google::Apis::CalendarV3::CalendarService.new
    @service.client_options.application_name = 'Sublayer'
    @service.authorization = Google::Auth.get_application_default(["https://www.googleapis.com/auth/calendar"])   
  end

  def call
    event = Google::Apis::CalendarV3::Event.new(
      summary: @summary,
      description: @description,
      start: Google::Apis::CalendarV3::EventDateTime.new(date_time: @start_time),
      end: Google::Apis::CalendarV3::EventDateTime.new(date_time: @end_time),
      attendees: @attendees.map { |email| Google::Apis::CalendarV3::EventAttendee.new(email: email) }
    )

    begin
      result = @service.insert_event(@calendar_id, event)
      Sublayer.configuration.logger.log(:info, "Event created: #{result.html_link}")
      result.html_link
    rescue Google::Apis::Error => e
      error_message = "Error creating Google Calendar event: #{e.message}"
      Sublayer.configuration.logger.log(:error, error_message)
      raise StandardError, error_message
    end
  end
end
